import java.util.*;

/**
 * 
 * @author carlosandres.mendez
 */
public class Discrete_FitnessFunction {

    /** Should this function be maximized or minimized */
    boolean maximize;

    //-------------------------------------------------------------------------
    // Constructors
    //-------------------------------------------------------------------------

    /** Default constructor */
    public Discrete_FitnessFunction() {
        maximize = false; // Default: Maximize
    }

    /**
     * Constructor 
     * @param maximize : Should we try to maximize or minimize this function?
     */
    public Discrete_FitnessFunction(boolean maximize) {
        this.maximize = maximize;
    }

    //-------------------------------------------------------------------------
    // Methods
    //-------------------------------------------------------------------------

    /**
     * Evaluates a particle at a given position with additional criteria.
     * Allows for customized evaluation based on different metrics.
     * 
     * @param position : Particle's position
     * @param criteria : Additional criteria weights (e.g., cost, performance)
     * @return Fitness function for a particle
     */
    public double evaluate(List<Allocation> position, Map<String, Double> criteria){
        double result = 0d;
        
        // Summing based on weighted criteria
        for(Allocation allocation : position){
            double weightedCost = allocation.getVm().getCost() * criteria.getOrDefault("cost", 1.0);
            double performance = allocation.getVm().getPerformance() * criteria.getOrDefault("performance", 1.0);

            result += weightedCost + performance;
        }
        return result;
    }

    /**
     * Evaluates a particle's fitness based on its position.
     * @param particle : Particle to evaluate
     * @param criteria : Criteria to use for fitness calculation
     * @return Fitness value for the particle
     */
    public double evaluate(Discrete_Particle particle, Map<String, Double> criteria) {
        List<Allocation> position = particle.getPosition();
        double fit = evaluate(position, criteria);
        particle.setFitness(fit, maximize);
        return fit;
    }

    /**
     * Checks if 'otherValue' is better than 'fitness' based on the objective.
     * @param fitness : Current fitness value
     * @param otherValue : New fitness value to compare
     * @return true if 'otherValue' is better than 'fitness'
     */
    public boolean isBetterThan(double fitness, double otherValue) {
        return maximize ? otherValue > fitness : otherValue < fitness;
    }

    /** Are we maximizing this fitness function? */
    public boolean isMaximize() {
        return maximize;
    }

    public void setMaximize(boolean maximize) {
        this.maximize = maximize;
    }
}
